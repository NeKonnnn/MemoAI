import os
import sys
import torch
import queue
import sounddevice as sd
import re
import time
import json
from pathlib import Path
from vosk import Model, KaldiRecognizer
from agent import ask_agent
from memory import save_to_memory

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
SAMPLE_RATE = 16000
VOSK_MODEL_PATH = "model_small"
SILERO_MODELS_DIR = os.path.join(os.path.dirname(__file__), 'silero_models')
MODELS_URLS = {
    'ru': 'https://models.silero.ai/models/tts/ru/v3_1_ru.pt',
    'en': 'https://models.silero.ai/models/tts/en/v3_en.pt'
}
MODEL_PATHS = {
    'ru': os.path.join(SILERO_MODELS_DIR, 'ru', 'model.pt'),
    'en': os.path.join(SILERO_MODELS_DIR, 'en', 'model.pt')
}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è TTS
models = {}
tts_model_loaded = False
pyttsx3_engine = None

# –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ TTS
try:
    import pyttsx3
    pyttsx3_available = True
except ImportError:
    pyttsx3_available = False
    print("–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: pyttsx3 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∑–∞–ø–∞—Å–Ω–æ–π TTS –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

#---------- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ (Silero TTS) ----------#

def init_pyttsx3():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã pyttsx3"""
    global pyttsx3_engine
    if pyttsx3_available:
        try:
            pyttsx3_engine = pyttsx3.init()
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–æ–ª–æ—Å–∞
            voices = pyttsx3_engine.getProperty('voices')
            for voice in voices:
                if 'russian' in str(voice).lower() or 'ru' in str(voice).lower():
                    pyttsx3_engine.setProperty('voice', voice.id)
                    break
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ pyttsx3: {e}")
    return False

def download_model(lang):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞, –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"""
    model_path = MODEL_PATHS[lang]
    model_url = MODELS_URLS[lang]
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    os.makedirs(os.path.dirname(model_path), exist_ok=True)
    
    if not os.path.isfile(model_path):
        print(f"–ó–∞–≥—Ä—É–∂–∞—é –º–æ–¥–µ–ª—å {lang} –∏–∑ {model_url}")
        try:
            torch.hub.download_url_to_file(model_url, model_path)
            print(f"–ú–æ–¥–µ–ª—å {lang} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ {lang}: {e}")
            return False
    return True

def load_model(lang):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    global models, tts_model_loaded
    
    if lang in models:
        return True
        
    model_path = MODEL_PATHS[lang]
    
    try:
        if os.path.isfile(model_path):
            model = torch.package.PackageImporter(model_path).load_pickle("tts_models", "model")
            model.to('cpu')
            models[lang] = model
            tts_model_loaded = True
            return True
        else:
            print(f"–§–∞–π–ª –º–æ–¥–µ–ª–∏ {lang} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ {lang}: {e}")
        return False

def init_tts():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã TTS"""
    global tts_model_loaded
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è pyttsx3 –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
    pyttsx3_initialized = init_pyttsx3()
    
    # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä—É—Å—Å–∫—É—é –º–æ–¥–µ–ª—å
    if download_model('ru') and load_model('ru'):
        tts_model_loaded = True
    
    # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫—É—é –º–æ–¥–µ–ª—å
    download_model('en') and load_model('en')

def split_text_into_chunks(text, max_chunk_size=1000):
    """–î–µ–ª–∏—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏, –¥–ª–∏–Ω–∞ –∫–∞–∂–¥–æ–π –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç max_chunk_size —Å–∏–º–≤–æ–ª–æ–≤"""
    # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    sentences = re.split(r'(?<=[.!?])\s+', text)
    chunks = []
    current_chunk = ""

    for sentence in sentences:
        # –ï—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç –ª–∏–º–∏—Ç,
        # —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∫ —Ç–µ–∫—É—â–µ–º—É —Ñ—Ä–∞–≥–º–µ–Ω—Ç—É
        if len(current_chunk) + len(sentence) + 1 <= max_chunk_size:
            current_chunk += sentence + " "
        else:
            if current_chunk:
                chunks.append(current_chunk.strip())
            current_chunk = sentence + " "
    
    if current_chunk:
        chunks.append(current_chunk.strip())
    
    return chunks

def detect_language(text):
    """–ü—Ä–æ—Å—Ç–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ —Ç–µ–∫—Å—Ç–∞"""
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã
    cyrillic_count = sum(1 for char in text if '–∞' <= char.lower() <= '—è' or char.lower() in '—ë—ñ—ó—î“ë')
    
    # –ï—Å–ª–∏ –±–æ–ª–µ–µ 50% —Å–∏–º–≤–æ–ª–æ–≤ –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–µ, —Å—á–∏—Ç–∞–µ–º —Ç–µ–∫—Å—Ç —Ä—É—Å—Å–∫–∏–º
    if cyrillic_count / max(1, len(text)) > 0.5:
        return 'ru'
    else:
        return 'en'

def speak_text_silero(text, speaker='baya', sample_rate=48000, lang=None):
    """–û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é Silero TTS"""
    global models
    
    if not text:
        return False
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
    if lang is None:
        lang = detect_language(text)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –ª–∏ –Ω—É–∂–Ω–∞—è –º–æ–¥–µ–ª—å
    if lang not in models:
        if not load_model(lang):
            return False
    
    try:
        # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω –¥–ª–∏–Ω–Ω—ã–π
        chunks = split_text_into_chunks(text)
        
        for i, chunk in enumerate(chunks):
            if i > 0:
                time.sleep(0.3)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —á–∞—Å—Ç—è–º–∏
                
            audio = models[lang].apply_tts(
                text=chunk, 
                speaker=speaker,
                sample_rate=sample_rate,
                put_accent=True,
                put_yo=True
            )
            
            sd.play(audio, sample_rate)
            sd.wait()
        
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ç–µ–∑–µ —Ä–µ—á–∏ —á–µ—Ä–µ–∑ Silero: {e}")
        return False

def speak_text_pyttsx3(text):
    """–û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é pyttsx3"""
    global pyttsx3_engine
    
    if not text or not pyttsx3_engine:
        return False
    
    try:
        pyttsx3_engine.say(text)
        pyttsx3_engine.runAndWait()
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ç–µ–∑–µ —Ä–µ—á–∏ —á–µ—Ä–µ–∑ pyttsx3: {e}")
        return False

def speak_text(text, speaker='baya'):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞"""
    if not text:
        return
    
    # –ü—ã—Ç–∞–µ–º—Å—è –æ–∑–≤—É—á–∏—Ç—å —á–µ—Ä–µ–∑ Silero
    if tts_model_loaded and speak_text_silero(text, speaker):
        return
    
    # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º pyttsx3
    if speak_text_pyttsx3(text):
        return
    
    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ
    print("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–∑–≤—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç:", text[:50] + "..." if len(text) > 50 else text)

#---------- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏ (Vosk) ----------#

def check_vosk_model():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –º–æ–¥–µ–ª–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏"""
    if not os.path.exists(VOSK_MODEL_PATH):
        print(f"–û–®–ò–ë–ö–ê: –ú–æ–¥–µ–ª—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ {VOSK_MODEL_PATH}")
        return False
    return True

def recognize_speech():
    """–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞"""
    if not check_vosk_model():
        raise Exception("–ú–æ–¥–µ–ª—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    try:
        model = Model(VOSK_MODEL_PATH)
        q = queue.Queue()

        def callback(indata, frames, time, status):
            if status:
                print("–û—à–∏–±–∫–∞:", status, file=sys.stderr)
            q.put(bytes(indata))

        print("üé§ –°–∫–∞–∂–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å (Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞)...")
        with sd.RawInputStream(samplerate=SAMPLE_RATE, blocksize=8000, dtype='int16',
                              channels=1, callback=callback):
            rec = KaldiRecognizer(model, SAMPLE_RATE)
            while True:
                data = q.get()
                if rec.AcceptWaveform(data):
                    result = json.loads(rec.Result())
                    return result.get("text", "")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ —Ä–µ—á–∏: {e}")
        raise

def run_voice():
    """–ó–∞–ø—É—Å–∫ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤ –∫–æ–Ω—Å–æ–ª–∏"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–æ–¥–µ–ª–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏
    if not check_vosk_model():
        print("–ú–æ–¥–µ–ª—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        raise Exception("–ú–æ–¥–µ–ª—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É TTS
    init_tts()
    
    try:
        print("üîä –ì–æ–ª–æ—Å–æ–≤–æ–π —Ä–µ–∂–∏–º –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞.")
        while True:
            try:
                phrase = recognize_speech()
                if not phrase:
                    continue
                print("–í—ã:", phrase)
                save_to_memory("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", phrase)

                response = ask_agent(phrase)
                print("–ê–≥–µ–Ω—Ç:", response)
                speak_text(response)
                save_to_memory("–ê–≥–µ–Ω—Ç", response)
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e}")
                print("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞...")

    except KeyboardInterrupt:
        print("\n–ì–æ–ª–æ—Å–æ–≤–æ–π —Ä–µ–∂–∏–º –∑–∞–≤–µ—Ä—à—ë–Ω.")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º TTS –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
init_tts() 